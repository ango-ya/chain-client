// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FactoryV0ABI is the input ABI used to generate the binding from.
const FactoryV0ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractComplianceService\",\"name\":\"compliance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractSecurityToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"grantees\",\"type\":\"address[]\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// FactoryV0FuncSigs maps the 4-byte function signature to its string representation.
var FactoryV0FuncSigs = map[string]string{
	"cb6e91f2": "create(string,string,uint256,address[])",
}

// FactoryV0Bin is the compiled bytecode used for deploying new contracts.
var FactoryV0Bin = "0x608060405234801561001057600080fd5b50614078806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063cb6e91f21462000033575b600080fd5b6200004a6200004436600462000410565b6200004c565b005b60006040516200005c9062000333565b604051809103906000f08015801562000079573d6000803e3d6000fd5b509050600085858584604051620000909062000341565b6200009f949392919062000580565b604051809103906000f080158015620000bc573d6000803e3d6000fd5b5090506000826001600160a01b0316637ad260d56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001269190620005cb565b90506000836001600160a01b03166342c59ea16040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018f9190620005cb565b905060005b85518160ff161015620002df57846001600160a01b031663fa82ac7684888460ff1681518110620001c957620001c9620005e5565b60200260200101516040518363ffffffff1660e01b8152600401620002019291909182526001600160a01b0316602082015260400190565b600060405180830381600087803b1580156200021c57600080fd5b505af115801562000231573d6000803e3d6000fd5b50505050846001600160a01b031663fa82ac7683888460ff16815181106200025d576200025d620005e5565b60200260200101516040518363ffffffff1660e01b8152600401620002959291909182526001600160a01b0316602082015260400190565b600060405180830381600087803b158015620002b057600080fd5b505af1158015620002c5573d6000803e3d6000fd5b505050508080620002d690620005fb565b91505062000194565b50604080513381526001600160a01b03868116602083015285168183015290517f454b0172f64812df0cd504c2bd7df7aab8ff328a54d946b4bd0fa7c527adf9cc9181900360600190a15050505050505050565b6117f4806200062b83390190565b6122248062001e1f83390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200039157620003916200034f565b604052919050565b600082601f830112620003ab57600080fd5b813567ffffffffffffffff811115620003c857620003c86200034f565b620003dd601f8201601f191660200162000365565b818152846020838601011115620003f357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156200042757600080fd5b843567ffffffffffffffff808211156200044057600080fd5b6200044e8883890162000399565b95506020915081870135818111156200046657600080fd5b6200047489828a0162000399565b955050604087013593506060870135818111156200049157600080fd5b8701601f81018913620004a357600080fd5b803582811115620004b857620004b86200034f565b8060051b9250620004cb84840162000365565b818152928201840192848101908b851115620004e657600080fd5b928501925b848410156200052057833592506001600160a01b03831683146200050f5760008081fd5b8282529285019290850190620004eb565b989b979a50959850505050505050565b6000815180845260005b8181101562000558576020818501810151868301820152016200053a565b818111156200056b576000602083870101525b50601f01601f19169290920160200192915050565b60808152600062000595608083018762000530565b8281036020840152620005a9818762000530565b604084019590955250506001600160a01b039190911660609091015292915050565b600060208284031215620005de57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8114156200062157634e487b7160e01b600052601160045260246000fd5b6001019291505056fe60806040523480156200001157600080fd5b506000805460ff19168155620000289033620000c2565b62000035600080620000d2565b620000627fb6ce5d7b1abd7b8db19bd268a06356fe343d6a81aca7f86455289d12aecbdcda6000620000d2565b6200008f7f025c10ffb4b4f977a8899da54e53278bc52863e80645c6b1f1ee5085ab0069bc6000620000d2565b620000bc7f45ab91c290564be64950f51ce1d4f700ff1f5b9f8e0cff8b3f73e058b4d925d46000620000d2565b620001a7565b620000ce82826200011f565b5050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000ce5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b61163d80620001b76000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637ad260d5116101045780639e29d11c116100a2578063d547741f11610071578063d547741f14610401578063e93a101214610414578063fa82ac761461041c578063fb2cb34e1461042f57600080fd5b80639e29d11c146103bf578063a217fddf146103e6578063bd7a82ed14610328578063c6946a12146103ee57600080fd5b8063851416f1116100de578063851416f11461037e57806391d14854146103915780639a126a36146103a45780639dea93a9146103ac57600080fd5b80637ad260d51461034e5780637c41615f146103635780638456cb591461037657600080fd5b806336568abe1161017c5780635470b13b1161014b5780635470b13b146102f25780635c975abb1461031d5780636e8e4bb414610328578063779beedf1461033b57600080fd5b806336568abe1461029d5780633f4ba83a146102b057806342c59ea1146102b8578063454d6983146102df57600080fd5b806322c373e8116101b857806322c373e814610224578063248a9ca3146102375780632b268813146102695780632f2ff15d1461028a57600080fd5b806301ffc9a7146101df5780630e0ab654146102075780631e4e009114610211575b600080fd5b6101f26101ed3660046111d6565b61043c565b60405190151581526020015b60405180910390f35b61020f610473565b005b61020f61021f366004611200565b61052a565b6101f261023236600461123a565b610545565b61025b610245366004611257565b6000908152600160208190526040909120015490565b6040519081526020016101fe565b61027c610277366004611270565b610552565b6040516101fe92919061131a565b61020f61029836600461133d565b6105f4565b61020f6102ab36600461133d565b61061b565b61020f610699565b61025b7f025c10ffb4b4f977a8899da54e53278bc52863e80645c6b1f1ee5085ab0069bc81565b61027c6102ed36600461136d565b6106ec565b610305610300366004611257565b61077b565b6040516001600160a01b0390911681526020016101fe565b60005460ff166101f2565b6101f261033636600461123a565b610788565b61020f61034936600461123a565b6107a2565b61025b6000805160206115e883398151915281565b61027c6103713660046113c4565b61080b565b61020f61081a565b61020f61038c36600461123a565b61086d565b6101f261039f36600461133d565b6108d0565b61025b6108fb565b61027c6103ba36600461123a565b61090c565b61025b7f45ab91c290564be64950f51ce1d4f700ff1f5b9f8e0cff8b3f73e058b4d925d481565b61025b600081565b61027c6103fc36600461136d565b6109a9565b61020f61040f36600461133d565b610a1a565b61020f610a41565b61020f61042a36600461133d565b610aca565b6002546101f29060ff1681565b60006001600160e01b03198216637965db0b60e01b148061046d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206115e88339815191523361048d82826108d0565b806104b15750600082815260016020819052604090912001546104b1905b826108d0565b6104d65760405162461bcd60e51b81526004016104cd90611491565b60405180910390fd5b6002805460ff191660011790557f483d42b2ec355eefc30508020d123de3c2fca2f0d6f8e751f98449099242b76b61050b3390565b6040516001600160a01b03909116815260200160405180910390a15050565b60006105368133610b32565b6105408383610b96565b505050565b600061046d600383610be3565b600060606105807f45ab91c290564be64950f51ce1d4f700ff1f5b9f8e0cff8b3f73e058b4d925d486610c08565b6105b257505060408051808201909152600d81526c3737903832b936b4b9b9b4b7b760991b60208201526000906105ec565b6000806105bd610c37565b91509150816105d3576000935091506105ec9050565b6001604051806020016040528060008152509350935050505b935093915050565b600082815260016020819052604090912001546106118133610b32565b6105408383610c6f565b6001600160a01b038116331461068b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104cd565b6106958282610cda565b5050565b6000336106a682826108d0565b806106c85750600082815260016020819052604090912001546106c8906104ab565b6106e45760405162461bcd60e51b81526004016104cd90611491565b610695610d41565b600060606107086000805160206115e883398151915286610c08565b61073a57505060408051808201909152600d81526c3737903832b936b4b9b9b4b7b760991b60208201526000906105ec565b600080610745610c37565b915091508161075b576000935091506105ec9050565b61076486610dd4565b9092509050816105d3576000935091506105ec9050565b600061046d600383610e09565b600061046d6000805160206115e883398151915283610c08565b6000805160206115e8833981519152336107bc82826108d0565b806107de5750600082815260016020819052604090912001546107de906104ab565b6107fa5760405162461bcd60e51b81526004016104cd90611491565b610805600384610e15565b50505050565b600060606000806105bd610c37565b60003361082782826108d0565b80610849575060008281526001602081905260409091200154610849906104ab565b6108655760405162461bcd60e51b81526004016104cd90611491565b610695610e2a565b6000805160206115e88339815191523361088782826108d0565b806108a95750600082815260016020819052604090912001546108a9906104ab565b6108c55760405162461bcd60e51b81526004016104cd90611491565b610805600384610ea5565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006109076003610eba565b905090565b6000606061093a7f025c10ffb4b4f977a8899da54e53278bc52863e80645c6b1f1ee5085ab0069bc84610c08565b61096c57505060408051808201909152600d81526c3737903832b936b4b9b9b4b7b760991b6020820152600092909150565b600080610977610c37565b915091508161098c5760009590945092505050565b600160405180602001604052806000815250935093505050915091565b600060606000806109b8610c37565b91509150816109ce576000935091506105ec9050565b610a0360025460408051808201909152600f81526e1d1c985b9cd9995c881c185d5cd959608a1b602082015260ff9091161591565b90925090508161075b576000935091506105ec9050565b60008281526001602081905260409091200154610a378133610b32565b6105408383610cda565b6000805160206115e883398151915233610a5b82826108d0565b80610a7d575060008281526001602081905260409091200154610a7d906104ab565b610a995760405162461bcd60e51b81526004016104cd90611491565b6002805460ff191690557f27b779563480879c8e2872999840b721537eb09dccf94115a2276ca341cdbb523361050b565b610ad56000336108d0565b80610ae55750610ae582336108d0565b610b285760405162461bcd60e51b815260206004820152601460248201527337379030b1b1b2b9b9903832b936b4b9b9b4b7b760611b60448201526064016104cd565b6106958282610ec4565b610b3c82826108d0565b61069557610b54816001600160a01b03166014610ece565b610b5f836020610ece565b604051602001610b709291906114b8565b60408051601f198184030181529082905262461bcd60e51b82526104cd9160040161152d565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000610c1483836108d0565b80610c01575060008381526001602081905260409091200154610c0190836108d0565b60006060610c4760005460ff1690565b15604051806040016040528060068152602001651c185d5cd95960d21b815250915091509091565b610c7982826108d0565b6106955760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b610ce482826108d0565b156106955760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60005460ff16610d8a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104cd565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006060610de183610545565b604051806040016040528060068152602001656e6f206b796360d01b81525091509150915091565b6000610c01838361106a565b6000610c01836001600160a01b038416611094565b60005460ff1615610e705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104cd565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610db73390565b6000610c01836001600160a01b0384166110e3565b600061046d825490565b6106958282610c6f565b60606000610edd836002611556565b610ee8906002611575565b67ffffffffffffffff811115610f0057610f006113ae565b6040519080825280601f01601f191660200182016040528015610f2a576020820181803683370190505b509050600360fc1b81600081518110610f4557610f4561158d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610f7457610f7461158d565b60200101906001600160f81b031916908160001a9053506000610f98846002611556565b610fa3906001611575565b90505b600181111561101b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610fd757610fd761158d565b1a60f81b828281518110610fed57610fed61158d565b60200101906001600160f81b031916908160001a90535060049490941c93611014816115a3565b9050610fa6565b508315610c015760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104cd565b60008260000182815481106110815761108161158d565b9060005260206000200154905092915050565b60008181526001830160205260408120546110db5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561046d565b50600061046d565b600081815260018301602052604081205480156111cc5760006111076001836115ba565b855490915060009061111b906001906115ba565b905081811461118057600086600001828154811061113b5761113b61158d565b906000526020600020015490508087600001848154811061115e5761115e61158d565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611191576111916115d1565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061046d565b600091505061046d565b6000602082840312156111e857600080fd5b81356001600160e01b031981168114610c0157600080fd5b6000806040838503121561121357600080fd5b50508035926020909101359150565b6001600160a01b038116811461123757600080fd5b50565b60006020828403121561124c57600080fd5b8135610c0181611222565b60006020828403121561126957600080fd5b5035919050565b60008060006060848603121561128557600080fd5b833561129081611222565b925060208401356112a081611222565b9150604084013561ffff811681146112b757600080fd5b809150509250925092565b60005b838110156112dd5781810151838201526020016112c5565b838111156108055750506000910152565b600081518084526113068160208601602086016112c2565b601f01601f19169290920160200192915050565b821515815260406020820152600061133560408301846112ee565b949350505050565b6000806040838503121561135057600080fd5b82359150602083013561136281611222565b809150509250929050565b60008060006060848603121561138257600080fd5b833561138d81611222565b9250602084013561139d81611222565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156113d957600080fd5b83356113e481611222565b925060208401359150604084013567ffffffffffffffff8082111561140857600080fd5b818601915086601f83011261141c57600080fd5b81358181111561142e5761142e6113ae565b604051601f8201601f19908116603f01168101908382118183101715611456576114566113ae565b8160405282815289602084870101111561146f57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6020808252600d908201526c3737903832b936b4b9b9b4b7b760991b604082015260600190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516114f08160178501602088016112c2565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516115218160288401602088016112c2565b01602801949350505050565b602081526000610c0160208301846112ee565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561157057611570611540565b500290565b6000821982111561158857611588611540565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816115b2576115b2611540565b506000190190565b6000828210156115cc576115cc611540565b500390565b634e487b7160e01b600052603160045260246000fdfeb6ce5d7b1abd7b8db19bd268a06356fe343d6a81aca7f86455289d12aecbdcdaa2646970667358221220ed6d864bb65ff6c91ec5c609e3bc6a7e3c3a02adc6b9d22aa9d4ea6b98c59aca64736f6c634300080a003360806040523480156200001157600080fd5b50604051620022243803806200222483398101604081905262000034916200032a565b6040805160208101918290526000808252909185916200005791600391620001b7565b5080516200006d906004906020840190620001b7565b505084516200008591506005906020870190620001b7565b50620000923383620000cf565b60065461ffff16600090815260076020526040902080546001600160a01b0319166001600160a01b03929092169190911790555062000423915050565b6001600160a01b0382166200012a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200013e9190620003bf565b90915550506001600160a01b038216600090815260208190526040812080548392906200016d908490620003bf565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001c590620003e6565b90600052602060002090601f016020900481019282620001e9576000855562000234565b82601f106200020457805160ff191683800117855562000234565b8280016001018555821562000234579182015b828111156200023457825182559160200191906001019062000217565b506200024292915062000246565b5090565b5b8082111562000242576000815560010162000247565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200028557600080fd5b81516001600160401b0380821115620002a257620002a26200025d565b604051601f8301601f19908116603f01168101908282118183101715620002cd57620002cd6200025d565b81604052838152602092508683858801011115620002ea57600080fd5b600091505b838210156200030e5785820183015181830184015290820190620002ef565b83821115620003205760008385830101525b9695505050505050565b600080600080608085870312156200034157600080fd5b84516001600160401b03808211156200035957600080fd5b620003678883890162000273565b955060208701519150808211156200037e57600080fd5b506200038d8782880162000273565b60408701516060880151919550935090506001600160a01b0381168114620003b457600080fd5b939692955090935050565b60008219821115620003e157634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620003fb57607f821691505b602082108114156200041d57634e487b7160e01b600052602260045260246000fd5b50919050565b611df180620004336000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638103f8c9116100b8578063a457c2d71161007c578063a457c2d7146102ce578063a9059cbb146102e1578063b1cd221a146102f4578063c47f002714610307578063db736b701461031a578063dd62ed3e1461032d57600080fd5b80638103f8c914610282578063867904b41461028a5780639326b7721461029d57806395d89b41146102be578063a288bc9b146102c657600080fd5b806323b872dd1161010a57806323b872dd146101c2578063313ce567146101d557806339509351146101e45780633f9b250a146101f75780636d7fea861461021857806370a082311461025957600080fd5b8063010648ca1461014757806306fdde031461015c578063095ea7b31461017a57806318160ddd1461019d5780631da1c3bc146101af575b600080fd5b61015a610155366004611812565b610366565b005b6101646104c7565b60405161017191906118ec565b60405180910390f35b61018d610188366004611914565b610559565b6040519015158152602001610171565b6002545b604051908152602001610171565b61015a6101bd366004611940565b610570565b61018d6101d036600461195d565b6106d6565b60405160128152602001610171565b61018d6101f2366004611914565b610780565b61020a61020536600461199e565b6107bc565b6040516101719291906119b7565b610241610226366004611a00565b6007602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610171565b6101a1610267366004611940565b6001600160a01b031660009081526020819052604090205490565b6101a16108a9565b61015a610298366004611914565b6108ba565b6006546102ab9061ffff1681565b60405161ffff9091168152602001610171565b6101646109c3565b6102416109d2565b61018d6102dc366004611914565b6109f4565b61018d6102ef366004611914565b610a8d565b61015a610302366004611ae9565b610a9a565b61015a610315366004611b42565b610c63565b61015a61032836600461199e565b610d60565b6101a161033b366004611b77565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000806103716109d2565b6001600160a01b0316639dea93a9336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016000604051808303816000875af11580156103c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103ee9190810190611bc5565b9150915081819061041b5760405162461bcd60e51b815260040161041291906118ec565b60405180910390fd5b506104828660405180606001604052808681526020014267ffffffffffffffff16815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505091525060089190610e49565b50857fcf33f3c1d8bd1cb6c02665a29edf23a47eaf835224b70b1bcc96f6b8528f35db8487876040516104b793929190611c4f565b60405180910390a2505050505050565b6060600580546104d690611c85565b80601f016020809104026020016040519081016040528092919081815260200182805461050290611c85565b801561054f5780601f106105245761010080835404028352916020019161054f565b820191906000526020600020905b81548152906001019060200180831161053257829003601f168201915b5050505050905090565b6000610566338484610eb7565b5060015b92915050565b60008061057b6109d2565b6001600160a01b0316632b26881333600654869061059e9061ffff166001611cd6565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015261ffff1660448201526064016000604051808303816000875af11580156105f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261061e9190810190611bc5565b915091508181906106425760405162461bcd60e51b815260040161041291906118ec565b506006805461ffff1690600061065783611cfc565b82546101009290920a61ffff81810219909316918316021790915560068054821660009081526007602052604080822080546001600160a01b0319166001600160a01b038a1690811790915592549051929450909216917f6254add7de637e7042d0b7fce4c8f1fd34212474c8e8063df276db619363050f91a3505050565b60006106e3848484610fdc565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156107685760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610412565b6107758533858403610eb7565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105669185906107b7908690611d1e565b610eb7565b6040805160608082018352600080835260208301819052928201526107e260088461112e565b6040805160608101825282548152600183015467ffffffffffffffff16602082015260028301805491928492908401919061081c90611c85565b80601f016020809104026020016040519081016040528092919081815260200182805461084890611c85565b80156108955780601f1061086a57610100808354040283529160200191610895565b820191906000526020600020905b81548152906001019060200180831161087857829003601f168201915b505050505081525050905091509150915091565b60006108b56008611158565b905090565b336000806108c66109d2565b60405163454d698360e01b81526001600160a01b038581166004830152878116602483015260448201879052919091169063454d6983906064016000604051808303816000875af115801561091f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109479190810190611bc5565b9150915081819061096b5760405162461bcd60e51b815260040161041291906118ec565b506109768585611163565b604080516001600160a01b038581168252602082018790528716917feae032f3b14bbe29478004b570b0d37a2ede6a8c1327d35113dedee7e5d7abdc910160405180910390a25050505050565b6060600480546104d690611c85565b60065461ffff166000908152600760205260409020546001600160a01b031690565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610a765760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610412565b610a833385858403610eb7565b5060019392505050565b6000610566338484610fdc565b33600080610aa66109d2565b6001600160a01b0316637c41615f8787876040518463ffffffff1660e01b8152600401610ad593929190611d36565b6000604051808303816000875af1158015610af4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b1c9190810190611bc5565b91509150818190610b405760405162461bcd60e51b815260040161041291906118ec565b50856001600160a01b0316836001600160a01b03161480610bd05750610b646109d2565b604051631ba392ed60e21b81526001600160a01b0385811660048301529190911690636e8e4bb490602401602060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd09190611d5d565b610c1c5760405162461bcd60e51b815260206004820152601960248201527f6e6f206f776e6572206f72206e6f207065726d697373696f6e000000000000006044820152606401610412565b610c268686611242565b856001600160a01b03167f81b1bce0cc843f526fddf5d369c650e9d717cd811d8e08654ab113d3ea464a0e8487876040516104b793929190611d36565b600080610c6e6109d2565b6001600160a01b0316639dea93a9336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016000604051808303816000875af1158015610cc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ceb9190810190611bc5565b91509150818190610d0f5760405162461bcd60e51b815260040161041291906118ec565b508251610d2390600590602086019061173c565b507f9f7688a97f1ac51fe03bac18af18d6810f9f11f0db08c59b1938a9ac825ef74483604051610d5391906118ec565b60405180910390a1505050565b600080610d6b6109d2565b6001600160a01b0316639dea93a9336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016000604051808303816000875af1158015610dc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610de89190810190611bc5565b91509150818190610e0c5760405162461bcd60e51b815260040161041291906118ec565b50610e18600884611388565b5060405183907f91f2d4a64ed6f16c6791d415c59ac18af9356ab2eaf9595c8145c06dd938b06690600090a2505050565b6000828152600284810160209081526040808420855181558583015160018201805467ffffffffffffffff191667ffffffffffffffff90921691909117905590850151805186949293610ea093850192019061173c565b50610eaf9150859050846113d2565b949350505050565b6001600160a01b038316610f195760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610412565b6001600160a01b038216610f7a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610412565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080610fe76109d2565b60405163634a350960e11b81526001600160a01b038781166004830152868116602483015260448201869052919091169063c6946a12906064016000604051808303816000875af1158015611040573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110689190810190611bc5565b9150915081819061108c5760405162461bcd60e51b815260040161041291906118ec565b506110956109d2565b6001600160a01b031663bd7a82ed336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c9190611d5d565b1561111c5761111c853385610eb7565b6111278585856113de565b5050505050565b6000808061113c85856115ae565b6000818152600296909601602052604090952094959350505050565b600061056a826115ba565b6001600160a01b0382166111b95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610412565b80600260008282546111cb9190611d1e565b90915550506001600160a01b038216600090815260208190526040812080548392906111f8908490611d1e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166112a25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610412565b6001600160a01b038216600090815260208190526040902054818110156113165760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610412565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611345908490611d78565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610fcf565b600081815260028084016020526040822082815560018101805467ffffffffffffffff191690559082906113be908301826117c0565b506113cb905083836115c4565b9392505050565b60006113cb83836115d0565b6001600160a01b0383166114425760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610412565b6001600160a01b0382166114a45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610412565b6001600160a01b0383166000908152602081905260409020548181101561151c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610412565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611553908490611d1e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161159f91815260200190565b60405180910390a35b50505050565b60006113cb838361161f565b600061056a825490565b60006113cb8383611649565b60008181526001830160205260408120546116175750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561056a565b50600061056a565b600082600001828154811061163657611636611d8f565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561173257600061166d600183611d78565b855490915060009061168190600190611d78565b90508181146116e65760008660000182815481106116a1576116a1611d8f565b90600052602060002001549050808760000184815481106116c4576116c4611d8f565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806116f7576116f7611da5565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061056a565b600091505061056a565b82805461174890611c85565b90600052602060002090601f01602090048101928261176a57600085556117b0565b82601f1061178357805160ff19168380011785556117b0565b828001600101855582156117b0579182015b828111156117b0578251825591602001919060010190611795565b506117bc9291506117fd565b5090565b5080546117cc90611c85565b6000825580601f106117dc575050565b601f0160209004906000526020600020908101906117fa91906117fd565b50565b5b808211156117bc57600081556001016117fe565b6000806000806060858703121561182857600080fd5b84359350602085013567ffffffffffffffff8082111561184757600080fd5b818701915087601f83011261185b57600080fd5b81358181111561186a57600080fd5b88602082850101111561187c57600080fd5b95986020929092019750949560400135945092505050565b60005b838110156118af578181015183820152602001611897565b838111156115a85750506000910152565b600081518084526118d8816020860160208601611894565b601f01601f19169290920160200192915050565b6020815260006113cb60208301846118c0565b6001600160a01b03811681146117fa57600080fd5b6000806040838503121561192757600080fd5b8235611932816118ff565b946020939093013593505050565b60006020828403121561195257600080fd5b81356113cb816118ff565b60008060006060848603121561197257600080fd5b833561197d816118ff565b9250602084013561198d816118ff565b929592945050506040919091013590565b6000602082840312156119b057600080fd5b5035919050565b828152604060208201528151604082015267ffffffffffffffff602083015116606082015260006040830151606060808401526119f760a08401826118c0565b95945050505050565b600060208284031215611a1257600080fd5b813561ffff811681146113cb57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6357611a63611a24565b604052919050565b600067ffffffffffffffff821115611a8557611a85611a24565b50601f01601f191660200190565b600082601f830112611aa457600080fd5b8135611ab7611ab282611a6b565b611a3a565b818152846020838601011115611acc57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215611afe57600080fd5b8335611b09816118ff565b925060208401359150604084013567ffffffffffffffff811115611b2c57600080fd5b611b3886828701611a93565b9150509250925092565b600060208284031215611b5457600080fd5b813567ffffffffffffffff811115611b6b57600080fd5b610eaf84828501611a93565b60008060408385031215611b8a57600080fd5b8235611b95816118ff565b91506020830135611ba5816118ff565b809150509250929050565b80518015158114611bc057600080fd5b919050565b60008060408385031215611bd857600080fd5b611be183611bb0565b9150602083015167ffffffffffffffff811115611bfd57600080fd5b8301601f81018513611c0e57600080fd5b8051611c1c611ab282611a6b565b818152866020838501011115611c3157600080fd5b611c42826020830160208601611894565b8093505050509250929050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600181811c90821680611c9957607f821691505b60208210811415611cba57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115611cf357611cf3611cc0565b01949350505050565b600061ffff80831681811415611d1457611d14611cc0565b6001019392505050565b60008219821115611d3157611d31611cc0565b500190565b60018060a01b03841681528260208201526060604082015260006119f760608301846118c0565b600060208284031215611d6f57600080fd5b6113cb82611bb0565b600082821015611d8a57611d8a611cc0565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220cd972ea74f6b39ae90edd7be7885ca20c054455cd376a548b1ebfd5a9f9006bd64736f6c634300080a0033a26469706673582212202c75d7397e09cde37333cd94ecf4a68a6a926c075c5287a5a9a5bfa1fb070ad564736f6c634300080a0033"

// DeployFactoryV0 deploys a new Ethereum contract, binding an instance of FactoryV0 to it.
func DeployFactoryV0(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FactoryV0, error) {
	parsed, err := abi.JSON(strings.NewReader(FactoryV0ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FactoryV0Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FactoryV0{FactoryV0Caller: FactoryV0Caller{contract: contract}, FactoryV0Transactor: FactoryV0Transactor{contract: contract}, FactoryV0Filterer: FactoryV0Filterer{contract: contract}}, nil
}

// FactoryV0 is an auto generated Go binding around an Ethereum contract.
type FactoryV0 struct {
	FactoryV0Caller     // Read-only binding to the contract
	FactoryV0Transactor // Write-only binding to the contract
	FactoryV0Filterer   // Log filterer for contract events
}

// FactoryV0Caller is an auto generated read-only Go binding around an Ethereum contract.
type FactoryV0Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryV0Transactor is an auto generated write-only Go binding around an Ethereum contract.
type FactoryV0Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryV0Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FactoryV0Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryV0Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FactoryV0Session struct {
	Contract     *FactoryV0        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FactoryV0CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FactoryV0CallerSession struct {
	Contract *FactoryV0Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// FactoryV0TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FactoryV0TransactorSession struct {
	Contract     *FactoryV0Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FactoryV0Raw is an auto generated low-level Go binding around an Ethereum contract.
type FactoryV0Raw struct {
	Contract *FactoryV0 // Generic contract binding to access the raw methods on
}

// FactoryV0CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FactoryV0CallerRaw struct {
	Contract *FactoryV0Caller // Generic read-only contract binding to access the raw methods on
}

// FactoryV0TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FactoryV0TransactorRaw struct {
	Contract *FactoryV0Transactor // Generic write-only contract binding to access the raw methods on
}

// NewFactoryV0 creates a new instance of FactoryV0, bound to a specific deployed contract.
func NewFactoryV0(address common.Address, backend bind.ContractBackend) (*FactoryV0, error) {
	contract, err := bindFactoryV0(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FactoryV0{FactoryV0Caller: FactoryV0Caller{contract: contract}, FactoryV0Transactor: FactoryV0Transactor{contract: contract}, FactoryV0Filterer: FactoryV0Filterer{contract: contract}}, nil
}

// NewFactoryV0Caller creates a new read-only instance of FactoryV0, bound to a specific deployed contract.
func NewFactoryV0Caller(address common.Address, caller bind.ContractCaller) (*FactoryV0Caller, error) {
	contract, err := bindFactoryV0(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryV0Caller{contract: contract}, nil
}

// NewFactoryV0Transactor creates a new write-only instance of FactoryV0, bound to a specific deployed contract.
func NewFactoryV0Transactor(address common.Address, transactor bind.ContractTransactor) (*FactoryV0Transactor, error) {
	contract, err := bindFactoryV0(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryV0Transactor{contract: contract}, nil
}

// NewFactoryV0Filterer creates a new log filterer instance of FactoryV0, bound to a specific deployed contract.
func NewFactoryV0Filterer(address common.Address, filterer bind.ContractFilterer) (*FactoryV0Filterer, error) {
	contract, err := bindFactoryV0(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FactoryV0Filterer{contract: contract}, nil
}

// bindFactoryV0 binds a generic wrapper to an already deployed contract.
func bindFactoryV0(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FactoryV0ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FactoryV0 *FactoryV0Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FactoryV0.Contract.FactoryV0Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FactoryV0 *FactoryV0Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FactoryV0.Contract.FactoryV0Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FactoryV0 *FactoryV0Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FactoryV0.Contract.FactoryV0Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FactoryV0 *FactoryV0CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FactoryV0.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FactoryV0 *FactoryV0TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FactoryV0.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FactoryV0 *FactoryV0TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FactoryV0.Contract.contract.Transact(opts, method, params...)
}

// Create is a paid mutator transaction binding the contract method 0xcb6e91f2.
//
// Solidity: function create(string name, string symbol, uint256 initialSupply, address[] grantees) returns()
func (_FactoryV0 *FactoryV0Transactor) Create(opts *bind.TransactOpts, name string, symbol string, initialSupply *big.Int, grantees []common.Address) (*types.Transaction, error) {
	return _FactoryV0.contract.Transact(opts, "create", name, symbol, initialSupply, grantees)
}

// Create is a paid mutator transaction binding the contract method 0xcb6e91f2.
//
// Solidity: function create(string name, string symbol, uint256 initialSupply, address[] grantees) returns()
func (_FactoryV0 *FactoryV0Session) Create(name string, symbol string, initialSupply *big.Int, grantees []common.Address) (*types.Transaction, error) {
	return _FactoryV0.Contract.Create(&_FactoryV0.TransactOpts, name, symbol, initialSupply, grantees)
}

// Create is a paid mutator transaction binding the contract method 0xcb6e91f2.
//
// Solidity: function create(string name, string symbol, uint256 initialSupply, address[] grantees) returns()
func (_FactoryV0 *FactoryV0TransactorSession) Create(name string, symbol string, initialSupply *big.Int, grantees []common.Address) (*types.Transaction, error) {
	return _FactoryV0.Contract.Create(&_FactoryV0.TransactOpts, name, symbol, initialSupply, grantees)
}

// FactoryV0CreatedIterator is returned from FilterCreated and is used to iterate over the raw logs and unpacked data for Created events raised by the FactoryV0 contract.
type FactoryV0CreatedIterator struct {
	Event *FactoryV0Created // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FactoryV0CreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FactoryV0Created)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FactoryV0Created)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FactoryV0CreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FactoryV0CreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FactoryV0Created represents a Created event raised by the FactoryV0 contract.
type FactoryV0Created struct {
	Creator    common.Address
	Compliance common.Address
	Token      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCreated is a free log retrieval operation binding the contract event 0x454b0172f64812df0cd504c2bd7df7aab8ff328a54d946b4bd0fa7c527adf9cc.
//
// Solidity: event Created(address creator, address compliance, address token)
func (_FactoryV0 *FactoryV0Filterer) FilterCreated(opts *bind.FilterOpts) (*FactoryV0CreatedIterator, error) {

	logs, sub, err := _FactoryV0.contract.FilterLogs(opts, "Created")
	if err != nil {
		return nil, err
	}
	return &FactoryV0CreatedIterator{contract: _FactoryV0.contract, event: "Created", logs: logs, sub: sub}, nil
}

// WatchCreated is a free log subscription operation binding the contract event 0x454b0172f64812df0cd504c2bd7df7aab8ff328a54d946b4bd0fa7c527adf9cc.
//
// Solidity: event Created(address creator, address compliance, address token)
func (_FactoryV0 *FactoryV0Filterer) WatchCreated(opts *bind.WatchOpts, sink chan<- *FactoryV0Created) (event.Subscription, error) {

	logs, sub, err := _FactoryV0.contract.WatchLogs(opts, "Created")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FactoryV0Created)
				if err := _FactoryV0.contract.UnpackLog(event, "Created", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreated is a log parse operation binding the contract event 0x454b0172f64812df0cd504c2bd7df7aab8ff328a54d946b4bd0fa7c527adf9cc.
//
// Solidity: event Created(address creator, address compliance, address token)
func (_FactoryV0 *FactoryV0Filterer) ParseCreated(log types.Log) (*FactoryV0Created, error) {
	event := new(FactoryV0Created)
	if err := _FactoryV0.contract.UnpackLog(event, "Created", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
